// Copyright (c) .NET Foundation and Contributors. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.Formatting.CSharp
{
    public static partial class FormattingDiagnosticRules
    {
        /// <summary>RCS0001</summary>
        public static readonly DiagnosticDescriptor AddBlankLineAfterEmbeddedStatement = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineAfterEmbeddedStatement, 
            title:              "Add blank line after embedded statement", 
            messageFormat:      "Add blank line after embedded statement", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineAfterEmbeddedStatement, 
            customTags:         []);

        /// <summary>RCS0002</summary>
        public static readonly DiagnosticDescriptor AddBlankLineAfterRegionDirective = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineAfterRegionDirective, 
            title:              "Add blank line after #region", 
            messageFormat:      "Add blank line after #region", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineAfterRegionDirective, 
            customTags:         []);

        /// <summary>RCS0003</summary>
        public static readonly DiagnosticDescriptor AddBlankLineAfterUsingDirectiveList = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineAfterUsingDirectiveList, 
            title:              "Add blank line after using directive list", 
            messageFormat:      "Add blank line after using directive list", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineAfterUsingDirectiveList, 
            customTags:         []);

        /// <summary>RCS0005</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBeforeEndRegionDirective = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBeforeEndRegionDirective, 
            title:              "Add blank line before #endregion", 
            messageFormat:      "Add blank line before #endregion", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBeforeEndRegionDirective, 
            customTags:         []);

        /// <summary>RCS0006</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBeforeUsingDirectiveList = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBeforeUsingDirectiveList, 
            title:              "Add blank line before using directive list", 
            messageFormat:      "Add blank line before using directive list", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBeforeUsingDirectiveList, 
            customTags:         []);

        /// <summary>RCS0007</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenAccessors = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenAccessors, 
            title:              "Add blank line between accessors", 
            messageFormat:      "Add blank line between accessors", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenAccessors, 
            customTags:         []);

        /// <summary>RCS0008</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenClosingBraceAndNextStatement = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenClosingBraceAndNextStatement, 
            title:              "Add blank line between closing brace and next statement", 
            messageFormat:      "Add blank line between closing brace and next statement", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenClosingBraceAndNextStatement, 
            customTags:         []);

        /// <summary>RCS0009</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenDeclarationAndDocumentationComment = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenDeclarationAndDocumentationComment, 
            title:              "Add blank line between declaration and documentation comment", 
            messageFormat:      "Add blank line between declaration and documentation comment", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenDeclarationAndDocumentationComment, 
            customTags:         []);

        /// <summary>RCS0010</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenDeclarations = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenDeclarations, 
            title:              "Add blank line between declarations", 
            messageFormat:      "Add blank line between declarations", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenDeclarations, 
            customTags:         []);

        /// <summary>RCS0011</summary>
        public static readonly DiagnosticDescriptor BlankLineBetweenSingleLineAccessors = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.BlankLineBetweenSingleLineAccessors, 
            title:              "Add/remove blank line between single-line accessors", 
            messageFormat:      "{0} blank line between single-line accessors", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.BlankLineBetweenSingleLineAccessors, 
            customTags:         []);

        /// <summary>RCS0012</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenSingleLineDeclarations = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenSingleLineDeclarations, 
            title:              "Add blank line between single-line declarations", 
            messageFormat:      "Add blank line between single-line declarations", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenSingleLineDeclarations, 
            customTags:         []);

        /// <summary>RCS0013</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenSingleLineDeclarationsOfDifferentKind = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenSingleLineDeclarationsOfDifferentKind, 
            title:              "Add blank line between single-line declarations of different kind", 
            messageFormat:      "Add blank line between single-line declarations of different kind", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenSingleLineDeclarationsOfDifferentKind, 
            customTags:         []);

        /// <summary>RCS0014</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBetweenSwitchSections = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBetweenSwitchSections, 
            title:              "[deprecated] Add blank line between switch sections", 
            messageFormat:      "([deprecated] Use RCS0061 instead) Add blank line between switch sections", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBetweenSwitchSections, 
            customTags:         []);

        /// <summary>RCS0015</summary>
        public static readonly DiagnosticDescriptor BlankLineBetweenUsingDirectives = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.BlankLineBetweenUsingDirectives, 
            title:              "Add/remove blank line between using directives", 
            messageFormat:      "{0} blank line between using directives", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.BlankLineBetweenUsingDirectives, 
            customTags:         []);

        /// <summary>RCS0016</summary>
        public static readonly DiagnosticDescriptor PutAttributeListOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutAttributeListOnItsOwnLine, 
            title:              "Put attribute list on its own line", 
            messageFormat:      "Put attribute list on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutAttributeListOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0020</summary>
        public static readonly DiagnosticDescriptor FormatAccessorBraces = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FormatAccessorBraces, 
            title:              "Format accessor's braces on a single line or multiple lines", 
            messageFormat:      "Format braces on {0}", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FormatAccessorBraces, 
            customTags:         []);

        /// <summary>RCS0021</summary>
        public static readonly DiagnosticDescriptor FormatBlockBraces = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FormatBlockBraces, 
            title:              "Format block's braces on a single line or multiple lines", 
            messageFormat:      "Format braces on {0}", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FormatBlockBraces, 
            customTags:         []);

        /// <summary>RCS0022</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfEmptyBlock = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddNewLineAfterOpeningBraceOfEmptyBlock, 
            title:              "[deprecated] Add new line after opening brace of empty block", 
            messageFormat:      "([deprecated] Use RCS0021 instead) Format braces on multiple lines", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddNewLineAfterOpeningBraceOfEmptyBlock, 
            customTags:         []);

        /// <summary>RCS0023</summary>
        public static readonly DiagnosticDescriptor FormatTypeDeclarationBraces = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FormatTypeDeclarationBraces, 
            title:              "Format type declaration's braces", 
            messageFormat:      "Format type declaration's braces", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FormatTypeDeclarationBraces, 
            customTags:         []);

        /// <summary>RCS0024</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterSwitchLabel = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddNewLineAfterSwitchLabel, 
            title:              "Add new line after switch label", 
            messageFormat:      "Add new line after switch label", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddNewLineAfterSwitchLabel, 
            customTags:         []);

        /// <summary>RCS0025</summary>
        public static readonly DiagnosticDescriptor PutFullAccessorOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutFullAccessorOnItsOwnLine, 
            title:              "Put full accessor on its own line", 
            messageFormat:      "Put full accessor on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutFullAccessorOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0027</summary>
        public static readonly DiagnosticDescriptor PlaceNewLineAfterOrBeforeBinaryOperator = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeBinaryOperator, 
            title:              "Place new line after/before binary operator", 
            messageFormat:      "Place new line {0} binary operator", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeBinaryOperator, 
            customTags:         []);

        /// <summary>RCS0028</summary>
        public static readonly DiagnosticDescriptor PlaceNewLineAfterOrBeforeConditionalOperator = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeConditionalOperator, 
            title:              "Place new line after/before '?:' operator", 
            messageFormat:      "Place new line {0} operator", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeConditionalOperator, 
            customTags:         []);

        /// <summary>RCS0029</summary>
        public static readonly DiagnosticDescriptor PutConstructorInitializerOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutConstructorInitializerOnItsOwnLine, 
            title:              "Put constructor initializer on its own line", 
            messageFormat:      "Put constructor initializer on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutConstructorInitializerOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0030</summary>
        public static readonly DiagnosticDescriptor PutEmbeddedStatementOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutEmbeddedStatementOnItsOwnLine, 
            title:              "Put embedded statement on its own line", 
            messageFormat:      "Put embedded statement on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutEmbeddedStatementOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0031</summary>
        public static readonly DiagnosticDescriptor PutEnumMemberOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutEnumMemberOnItsOwnLine, 
            title:              "Put enum member on its own line", 
            messageFormat:      "Put enum member on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutEnumMemberOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0032</summary>
        public static readonly DiagnosticDescriptor PlaceNewLineAfterOrBeforeArrowToken = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeArrowToken, 
            title:              "Place new line after/before arrow token", 
            messageFormat:      "Place new line {0} arrow token", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeArrowToken, 
            customTags:         []);

        /// <summary>RCS0033</summary>
        public static readonly DiagnosticDescriptor PutStatementOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutStatementOnItsOwnLine, 
            title:              "Put statement on its own line", 
            messageFormat:      "Put statement on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutStatementOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0034</summary>
        public static readonly DiagnosticDescriptor PutTypeParameterConstraintOnItsOwnLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutTypeParameterConstraintOnItsOwnLine, 
            title:              "Put type parameter constraint on its own line", 
            messageFormat:      "Put type parameter constraint on its own line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutTypeParameterConstraintOnItsOwnLine, 
            customTags:         []);

        /// <summary>RCS0036</summary>
        public static readonly DiagnosticDescriptor RemoveBlankLineBetweenSingleLineDeclarationsOfSameKind = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.RemoveBlankLineBetweenSingleLineDeclarationsOfSameKind, 
            title:              "Remove blank line between single-line declarations of same kind", 
            messageFormat:      "Remove blank line between single-line declarations of same kind", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.RemoveBlankLineBetweenSingleLineDeclarationsOfSameKind, 
            customTags:         []);

        /// <summary>RCS0038</summary>
        public static readonly DiagnosticDescriptor RemoveBlankLineBetweenUsingDirectivesWithSameRootNamespace = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.RemoveBlankLineBetweenUsingDirectivesWithSameRootNamespace, 
            title:              "[deprecated] Remove blank line between using directives with same root namespace", 
            messageFormat:      "([deprecated] Use RCS0015 instead) Remove blank line between using directives", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.RemoveBlankLineBetweenUsingDirectivesWithSameRootNamespace, 
            customTags:         []);

        /// <summary>RCS0039</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBeforeBaseList = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.RemoveNewLineBeforeBaseList, 
            title:              "Remove new line before base list", 
            messageFormat:      "Remove new line before base list", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.RemoveNewLineBeforeBaseList, 
            customTags:         []);

        /// <summary>RCS0041</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBetweenIfKeywordAndElseKeyword = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.RemoveNewLineBetweenIfKeywordAndElseKeyword, 
            title:              "Remove new line between 'if' keyword and 'else' keyword", 
            messageFormat:      "Remove new line between 'if' keyword and 'else' keyword", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.RemoveNewLineBetweenIfKeywordAndElseKeyword, 
            customTags:         []);

        /// <summary>RCS0042</summary>
        public static readonly DiagnosticDescriptor PutAutoAccessorsOnSingleLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutAutoAccessorsOnSingleLine, 
            title:              "Put auto-accessors on a single line", 
            messageFormat:      "Put auto-accessors on a single line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutAutoAccessorsOnSingleLine, 
            customTags:         []);

        /// <summary>RCS0043</summary>
        public static readonly DiagnosticDescriptor FormatAccessorBracesOnSingleLineWhenExpressionIsOnSingleLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FormatAccessorBracesOnSingleLineWhenExpressionIsOnSingleLine, 
            title:              "[deprecated] Format accessor's braces on a single line when expression is on single line", 
            messageFormat:      "([deprecated] Use RCS0020 with option 'roslynator_accessor_braces_style = single_line_when_expression_is_on_single_line') Format braces on a single line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FormatAccessorBracesOnSingleLineWhenExpressionIsOnSingleLine, 
            customTags:         []);

        /// <summary>RCS0044</summary>
        public static readonly DiagnosticDescriptor UseCarriageReturnAndLinefeedAsNewLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.UseCarriageReturnAndLinefeedAsNewLine, 
            title:              "Use carriage return + linefeed as new line", 
            messageFormat:      "Use carriage return + linefeed as new line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.UseCarriageReturnAndLinefeedAsNewLine, 
            customTags:         []);

        /// <summary>RCS0045</summary>
        public static readonly DiagnosticDescriptor UseLinefeedAsNewLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.UseLinefeedAsNewLine, 
            title:              "Use linefeed as new line", 
            messageFormat:      "Use linefeed as new line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.UseLinefeedAsNewLine, 
            customTags:         []);

        /// <summary>RCS0046</summary>
        public static readonly DiagnosticDescriptor UseSpacesInsteadOfTab = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.UseSpacesInsteadOfTab, 
            title:              "Use spaces instead of tab", 
            messageFormat:      "Use spaces instead of tab", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.UseSpacesInsteadOfTab, 
            customTags:         []);

        /// <summary>RCS0047</summary>
        public static readonly DiagnosticDescriptor WrapAndIndentEachNodeInList = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.WrapAndIndentEachNodeInList, 
            title:              "[deprecated] Wrap and indent each node in list", 
            messageFormat:      "([deprecated] Use RCS0053 instead) Wrap and indent each node in list", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.WrapAndIndentEachNodeInList, 
            customTags:         []);

        /// <summary>RCS0048</summary>
        public static readonly DiagnosticDescriptor PutInitializerOnSingleLine = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PutInitializerOnSingleLine, 
            title:              "Put initializer on a single line", 
            messageFormat:      "Put initializer on a single line", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PutInitializerOnSingleLine, 
            customTags:         []);

        /// <summary>RCS0049</summary>
        public static readonly DiagnosticDescriptor AddBlankLineAfterTopComment = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineAfterTopComment, 
            title:              "Add blank line after top comment", 
            messageFormat:      "Add blank line after top comment", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineAfterTopComment, 
            customTags:         []);

        /// <summary>RCS0050</summary>
        public static readonly DiagnosticDescriptor AddBlankLineBeforeTopDeclaration = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddBlankLineBeforeTopDeclaration, 
            title:              "Add blank line before top declaration", 
            messageFormat:      "Add blank line before top declaration", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddBlankLineBeforeTopDeclaration, 
            customTags:         []);

        /// <summary>RCS0051</summary>
        public static readonly DiagnosticDescriptor AddOrRemoveNewLineBeforeWhileInDoStatement = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.AddOrRemoveNewLineBeforeWhileInDoStatement, 
            title:              "Add/remove new line before 'while' in 'do' statement", 
            messageFormat:      "{0} new line before 'while' in 'do' statement", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.AddOrRemoveNewLineBeforeWhileInDoStatement, 
            customTags:         []);

        /// <summary>RCS0052</summary>
        public static readonly DiagnosticDescriptor PlaceNewLineAfterOrBeforeEqualsToken = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeEqualsToken, 
            title:              "Place new line after/before equals token", 
            messageFormat:      "Place new line {0} equals token", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeEqualsToken, 
            customTags:         []);

        /// <summary>RCS0053</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfList = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FixFormattingOfList, 
            title:              "Fix formatting of a list", 
            messageFormat:      "Fix formatting of {0}", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FixFormattingOfList, 
            customTags:         []);

        /// <summary>RCS0054</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfCallChain = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FixFormattingOfCallChain, 
            title:              "Fix formatting of a call chain", 
            messageFormat:      "Fix formatting of a call chain", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FixFormattingOfCallChain, 
            customTags:         []);

        /// <summary>RCS0055</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfBinaryExpressionChain = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.FixFormattingOfBinaryExpressionChain, 
            title:              "Fix formatting of a binary expression chain", 
            messageFormat:      "Fix formatting of a binary expression chain", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.FixFormattingOfBinaryExpressionChain, 
            customTags:         []);

        /// <summary>RCS0056</summary>
        public static readonly DiagnosticDescriptor LineIsTooLong = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.LineIsTooLong, 
            title:              "A line is too long", 
            messageFormat:      "A line is too long ({0} characters)", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.LineIsTooLong, 
            customTags:         []);

        /// <summary>RCS0057</summary>
        public static readonly DiagnosticDescriptor NormalizeWhitespaceAtBeginningOfFile = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.NormalizeWhitespaceAtBeginningOfFile, 
            title:              "Normalize whitespace at the beginning of a file", 
            messageFormat:      "Normalize whitespace at the beginning of a file", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.NormalizeWhitespaceAtBeginningOfFile, 
            customTags:         []);

        /// <summary>RCS0058</summary>
        public static readonly DiagnosticDescriptor NormalizeWhitespaceAtEndOfFile = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.NormalizeWhitespaceAtEndOfFile, 
            title:              "Normalize whitespace at the end of a file", 
            messageFormat:      "Normalize whitespace at the end of a file", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.NormalizeWhitespaceAtEndOfFile, 
            customTags:         []);

        /// <summary>RCS0059</summary>
        public static readonly DiagnosticDescriptor PlaceNewLineAfterOrBeforeNullConditionalOperator = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeNullConditionalOperator, 
            title:              "Place new line after/before null-conditional operator", 
            messageFormat:      "Place new line {0} null-conditional operator", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.PlaceNewLineAfterOrBeforeNullConditionalOperator, 
            customTags:         []);

        /// <summary>RCS0060</summary>
        public static readonly DiagnosticDescriptor BlankLineAfterFileScopedNamespaceDeclaration = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.BlankLineAfterFileScopedNamespaceDeclaration, 
            title:              "Add/remove line after file scoped namespace declaration", 
            messageFormat:      "{0} line after file scoped namespace declaration", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.BlankLineAfterFileScopedNamespaceDeclaration, 
            customTags:         []);

        /// <summary>RCS0061</summary>
        public static readonly DiagnosticDescriptor BlankLineBetweenSwitchSections = DiagnosticDescriptorFactory.Create(
            id:                 FormattingDiagnosticIds.BlankLineBetweenSwitchSections, 
            title:              "Add/remove blank line between switch sections", 
            messageFormat:      "{0} blank line between switch sections", 
            category:           DiagnosticCategories.Roslynator, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        FormattingDiagnosticIds.BlankLineBetweenSwitchSections, 
            customTags:         []);

    }
}